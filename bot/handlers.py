import os
import time
import logging
import datetime
from flask import request, abort, session, flash, redirect, url_for, render_template
from flask_login import (
    LoginManager,
    current_user,
    login_required,
    login_user,
    logout_user,
)
import telebot
from dotenv import find_dotenv, load_dotenv
from admin.models import AdminUser
from finance.markets import (
    get_price_market_for_america,
    get_price_market_for_russia,
    lst_favorites,
    lst_finance,
    lst_medical,
    lst_production,
    lst_technologies,
)
from finance.crypto import get_crypto
from finance.other import get_product

from . import server, db, babel
from .other import (
    get_current_state,
    set_state,
    get_current_state_edit,
    set_state_edit,
    States,
    StatesEdit,
)
from .keyboards import (
    main_keyboard,
    market_keyboard,
    finance_keyboard,
    categories_finance_keyboard,
    current_state_keyboard,
    categories_edit_finance_keyboard,
    current_state_edit_keyboard,
    news_keyboard,
)
from finance.models import CurrentBalance
from news.news import get_news


load_dotenv(find_dotenv())
login_manager = LoginManager(server)
login_manager.init_app(server)
login_manager.login_view = "index_autorization"
bot = telebot.TeleBot(os.getenv("token"))

log_file = os.path.join(os.path.abspath(os.path.dirname(__name__)), "file.log")
logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)
logger.addHandler(logging.FileHandler(log_file))


@login_manager.user_loader
def load_user(user_id):
    return AdminUser.query.get(int(user_id))
    


# –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
SELECT_CATEGORY = None
MONEY_VALUE = None
TEXT_CATEGORY = None

# —Ö—Ä–∞–Ω–µ–Ω–∏–µ id —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
DEL_MESSEGE_ID = []


@bot.callback_query_handler(func=lambda callback: callback.data == "start")
@bot.message_handler(commands=["start"])
def start_chat(message=None, callback=None):
    msg = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if message:
        [bot.delete_message(message.from_user.id, id) for id in DEL_MESSEGE_ID]
        DEL_MESSEGE_ID.clear()
        item = bot.send_message(message.from_user.id, msg, reply_markup=main_keyboard)
        DEL_MESSEGE_ID.append(item.message_id)
    else:
        [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
        DEL_MESSEGE_ID.clear()
        item = bot.send_message(
            callback.message.chat.id, msg, reply_markup=main_keyboard
        )
        DEL_MESSEGE_ID.append(item.message_id)


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#                         –û–ë–†–ê–ë–û–¢–ö–ê  –ö–õ–ê–í–ò–ê–¢–£–†
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


@bot.callback_query_handler(func=lambda callback: callback.data == "market")
def get_market_keyboard(callback):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ —Ä—ã–Ω–∫–∞–º."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    item = bot.send_message(
        callback.message.chat.id, "–†—ã–Ω–æ–∫ –∞–∫—Ü–∏–π", reply_markup=market_keyboard
    )
    DEL_MESSEGE_ID.append(item.message_id)


@bot.callback_query_handler(func=lambda callback: callback.data == "personal_finance")
def get_finance_keyboard(callback):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–µ–¥–µ–Ω–∏—è –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    item = bot.send_message(
        callback.message.chat.id, "–ñ—É—Ä–Ω–∞–ª —Ä–∞—Å—Ö–æ–¥–æ–≤", reply_markup=finance_keyboard
    )
    DEL_MESSEGE_ID.append(item.message_id)


@bot.callback_query_handler(func=lambda callback: callback.data == "add_entries")
def get_categories_finance_keyboard(callback):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–ø–∏—Å–µ–π –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    item = bot.send_message(
        callback.message.chat.id,
        "–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏",
        reply_markup=categories_finance_keyboard,
    )
    set_state(States.ENTER_CATEGORY.value)
    DEL_MESSEGE_ID.append(item.message_id)


@bot.callback_query_handler(func=lambda callback: callback.data == "update_entries")
def get_categories_edit_finance_keyboard(callback):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    item = bot.send_message(
        callback.message.chat.id,
        "–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        reply_markup=categories_edit_finance_keyboard,
    )
    set_state_edit(StatesEdit.ENTER_CATEGORY.value)
    DEL_MESSEGE_ID.append(item.message_id)


@bot.callback_query_handler(func=lambda callback: callback.data == "reset")
def reset_state(callback):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    item = bot.send_message(
        callback.message.chat.id,
        "–ß—Ç–æ –∂, –Ω–∞—á–Ω—ë–º –ø–æ-–Ω–æ–≤–æ–π. –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        reply_markup=categories_finance_keyboard,
    )
    set_state(States.ENTER_CATEGORY.value)
    DEL_MESSEGE_ID.append(item.message_id)


@bot.callback_query_handler(func=lambda callback: callback.data == "reset-edit")
def reset_state_edit(callback):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    item = bot.send_message(
        callback.message.chat.id,
        "–ß—Ç–æ –∂, –Ω–∞—á–Ω—ë–º –ø–æ-–Ω–æ–≤–æ–π. –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        reply_markup=categories_edit_finance_keyboard,
    )
    set_state_edit(StatesEdit.ENTER_CATEGORY.value)
    DEL_MESSEGE_ID.append(item.message_id)


@bot.callback_query_handler(func=lambda callback: callback.data == "close-add-entries")
def close_state(callback):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    item = bot.send_message(
        callback.message.chat.id, "–§–∏–Ω–∞–Ω—Å—ã", reply_markup=finance_keyboard
    )
    set_state(States.START.value)
    set_state_edit(StatesEdit.START.value)
    DEL_MESSEGE_ID.append(item.message_id)


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#                         –ù–û–í–û–°–¢–ò
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


@bot.callback_query_handler(func=lambda callback: callback.data == "news")
def news(callback):
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    item = bot.send_message(callback.message.chat.id, get_news(), reply_markup=news_keyboard,parse_mode="HTML")
    DEL_MESSEGE_ID.append(item.message_id)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#                         –û–ë–†–ê–ë–û–¢–ö–ê  –í–ï–î–ï–ù–ò–Ø –ó–ê–ü–ò–°–ï–ô –†–ê–°–•–û–î–û–í
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


@bot.callback_query_handler(func=lambda callback: callback.data == "balance")
def get_my_current_balance(callback):
    """–¢–µ–∫—É—à–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞—Å—Ö–æ–¥–æ–≤."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    entries = (
        CurrentBalance.query.filter_by().order_by(CurrentBalance.date.desc()).first()
    )
    if entries is None or entries.date.strftime(
        "%Y-%m-%d"
    ) < datetime.datetime.now().strftime("%Y-%m-%d"):
        msg = "–ù–ï–¢ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!"
    else:
        msg = entries.get_balance()
    item = bot.send_message(
        callback.message.chat.id, msg, reply_markup=main_keyboard, parse_mode="HTML"
    )
    DEL_MESSEGE_ID.append(item.message_id)


@bot.callback_query_handler(
    func=lambda callback: get_current_state_edit() == StatesEdit.ENTER_CATEGORY.value
)
def change_entries(callback):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    global TEXT_CATEGORY
    if callback.data == "transport-edit":
        TEXT_CATEGORY = "üöï –¢–†–ê–ù–°–ü–û–†–¢ üöï"
    if callback.data == "food-edit":
        TEXT_CATEGORY = "üçî –ï–î–ê üçî"
    if callback.data == "entertainment-edit":
        TEXT_CATEGORY = "üéâ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Øüéâ "
    if callback.data == "clothes-edit":
        TEXT_CATEGORY = "üéΩ –û–î–ï–ñ–î–ê üéΩ"
    if callback.data == "present-edit":
        TEXT_CATEGORY = "üéÅ –ü–û–î–ê–†–ö–ò üéÅ"
    if callback.data == "health-edit":
        TEXT_CATEGORY = "üíâ‚öï –ó–î–û–†–û–í–¨–ï ‚öïüíâ"
    if callback.data == "hobby-edit":
        TEXT_CATEGORY = "üíª –•–û–ë–ë–ò üíª"
    if callback.data == "other-edit":
        TEXT_CATEGORY = "‚öí –ü–†–û–ß–ï–ï ‚öí"

    global SELECT_CATEGORY
    SELECT_CATEGORY = callback.data
    msg = f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {TEXT_CATEGORY}\n–ò–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞: "
    item = bot.send_message(
        callback.message.chat.id, msg, reply_markup=current_state_edit_keyboard
    )
    set_state_edit(StatesEdit.ENTER_MONEY.value)
    DEL_MESSEGE_ID.append(item.message_id)


@bot.message_handler(
    func=lambda message: get_current_state_edit() == StatesEdit.ENTER_MONEY.value
)
def change_money(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—É–º–º—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    [bot.delete_message(message.from_user.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    msg = message.text
    global SELECT_CATEGORY
    global TEXT_CATEGORY
    MONEY_VALUE = int(msg)
    entries = CurrentBalance.query.order_by(CurrentBalance.date.desc()).first()
    # –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ—Ç,–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if entries is None or entries.date.strftime(
        "%Y-%m-%d"
    ) < datetime.datetime.now().strftime("%Y-%m-%d"):
        msg = "–ù–ï–¢ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!"
        bot.send_message(message.chat.id, msg)
    # –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ –≤ –Ω–µ–µ –≤–Ω–æ—Å—è—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    else:
        setattr(entries, SELECT_CATEGORY[:-5], MONEY_VALUE)
        db.session.commit()
        item = bot.send_message(
            message.chat.id,
            f"–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {TEXT_CATEGORY}\n–ò–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {MONEY_VALUE}",
            reply_markup=main_keyboard,
        )
    set_state_edit(StatesEdit.START.value)
    SELECT_CATEGORY = None
    MONEY_VALUE = None
    TEXT_CATEGORY = None
    DEL_MESSEGE_ID.append(item.message_id)


@bot.callback_query_handler(
    func=lambda callback: get_current_state() == States.ENTER_CATEGORY.value
)
def add_entries(callback):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    global TEXT_CATEGORY
    if callback.data == "transport":
        TEXT_CATEGORY = "üöï –¢–†–ê–ù–°–ü–û–†–¢ üöï"
    if callback.data == "food":
        TEXT_CATEGORY = "üçî –ï–î–ê üçî"
    if callback.data == "entertainment":
        TEXT_CATEGORY = "üéâ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø üéâ "
    if callback.data == "clothes":
        TEXT_CATEGORY = "üéΩ –û–î–ï–ñ–î–ê üéΩ"
    if callback.data == "present":
        TEXT_CATEGORY = "üéÅ –ü–û–î–ê–†–ö–ò üéÅ"
    if callback.data == "health":
        TEXT_CATEGORY = "üíâ‚öï –ó–î–û–†–û–í–¨–ï ‚öïüíâ"
    if callback.data == "hobby":
        TEXT_CATEGORY = "üíª –•–û–ë–ë–ò üíª"
    if callback.data == "other":
        TEXT_CATEGORY = "‚öí –ü–†–û–ß–ï–ï ‚öí"

    global SELECT_CATEGORY
    SELECT_CATEGORY = callback.data
    msg = f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {TEXT_CATEGORY}\n–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ: "
    item = bot.send_message(
        callback.message.chat.id, msg, reply_markup=current_state_keyboard
    )
    set_state(States.ENTER_MONEY.value)
    DEL_MESSEGE_ID.append(item.message_id)


@bot.message_handler(
    func=lambda message: get_current_state() == States.ENTER_MONEY.value
)
def spend_money(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    [bot.delete_message(message.from_user.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    msg = message.text
    global SELECT_CATEGORY
    global TEXT_CATEGORY
    MONEY_VALUE = int(msg)
    entries = CurrentBalance.query.order_by(CurrentBalance.date.desc()).first()
    # –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ—Ç, —Ç–æ –æ–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è, –∞ –∑–∞—Ç–µ–º –≤–Ω–æ—Å—è—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if entries is None or entries.date.strftime(
        "%Y-%m-%d"
    ) < datetime.datetime.now().strftime("%Y-%m-%d"):
        new_entries = CurrentBalance()
        db.session.add(new_entries)
        db.session.commit()
        entries = CurrentBalance.query.order_by(CurrentBalance.date.desc()).first()
        setattr(entries, SELECT_CATEGORY, MONEY_VALUE)
        msg = f"–î–æ–±–∞–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {SELECT_CATEGORY}\n –†–∞—Å—Ö–æ–¥: {MONEY_VALUE}"
    # –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ –≤ –Ω–µ–µ –≤–Ω–æ—Å—è—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    else:
        value = getattr(entries, SELECT_CATEGORY) + MONEY_VALUE
        setattr(entries, SELECT_CATEGORY, value)
        msg = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {TEXT_CATEGORY}\n –†–∞—Å—Ö–æ–¥: {MONEY_VALUE}"
    db.session.commit()
    item = bot.send_message(message.chat.id, msg, reply_markup=main_keyboard)
    set_state(States.START.value)
    SELECT_CATEGORY = None
    MONEY_VALUE = None
    TEXT_CATEGORY = None
    DEL_MESSEGE_ID.append(item.message_id)


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#                         –û–ë–†–ê–ë–û–¢–ö–ê  –†–´–ù–ö–û–í –ê–ö–¶–ò–ô, –ö–†–ò–ü–¢–´ –ò –¢. –î.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


@bot.callback_query_handler(func=lambda callback: callback.data == "crypto_market")
def get_market_crypto(callback):
    """–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    data = get_crypto()
    bot.send_message(
        callback.message.chat.id, data, reply_markup=main_keyboard, parse_mode="HTML"
    )


@bot.callback_query_handler(func=lambda callback: callback.data == "oil_market")
def get_oil(callback):
    """–¶–µ–Ω–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –Ω–µ—Ñ—Ç–∏ –∏ –≥–∞–∑–∞."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    data = get_product()
    bot.send_message(
        callback.message.chat.id, data, reply_markup=main_keyboard, parse_mode="HTML"
    )


@bot.callback_query_handler(func=lambda callback: callback.data == "rus_market")
def get_market_rus(callback):
    """–¶–µ–Ω—ã –∞–∫—Ü–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    data = get_price_market_for_russia()
    bot.send_message(
        callback.message.chat.id, data, reply_markup=main_keyboard, parse_mode="HTML"
    )


@bot.callback_query_handler(func=lambda callback: callback.data == "favorites_market")
def get_market_favorites(callback):
    """–¶–µ–Ω—ã –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    data = get_price_market_for_america(lst_favorites)
    bot.send_message(
        callback.message.chat.id, data, reply_markup=main_keyboard, parse_mode="HTML"
    )


@bot.callback_query_handler(func=lambda callback: callback.data == "finance_market")
def get_market_finance(callback):
    """–¶–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    data = get_price_market_for_america(lst_finance)
    bot.send_message(
        callback.message.chat.id, data, reply_markup=main_keyboard, parse_mode="HTML"
    )


@bot.callback_query_handler(func=lambda callback: callback.data == "medical_market")
def get_market_medical(callback):
    """–¶–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ –º–µ–¥–µ—Ü–∏–Ω—Å–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    data = get_price_market_for_america(lst_medical)
    bot.send_message(
        callback.message.chat.id, data, reply_markup=main_keyboard, parse_mode="HTML"
    )


@bot.callback_query_handler(func=lambda callback: callback.data == "production_market")
def get_market_production(callback):
    """–¶–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ/–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    data = get_price_market_for_america(lst_production)
    bot.send_message(
        callback.message.chat.id, data, reply_markup=main_keyboard, parse_mode="HTML"
    )


@bot.callback_query_handler(
    func=lambda callback: callback.data == "technologies_market"
)
def get_market_technologies(callback):
    """–¶–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞."""
    [bot.delete_message(callback.message.chat.id, id) for id in DEL_MESSEGE_ID]
    DEL_MESSEGE_ID.clear()
    data = get_price_market_for_america(lst_technologies)
    bot.send_message(
        callback.message.chat.id, data, reply_markup=main_keyboard, parse_mode="HTML"
    )


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


@babel.localeselector
def get_locale():
    if request.args.get("lang"):
        session["lang"] = request.args.get("lang")
    return session.get("lang", "ru")


@server.route("/", methods=["GET", "POST"])
def receive_update():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "OK"
    else:
        abort(403)


@server.route("/login", methods=['POST', 'GET'])
def index_autorization():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if request.method == "POST":
        admin = AdminUser.query.filter_by(
            name=request.form['name'],psw=request.form['psw']
        ).first()
        if admin:
            login_user(admin, remember=True)
            return redirect(url_for("admin.index"))
        else:
            flash("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")
    return render_template("autorization.html", title="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")


@server.route("/exit", methods=["POST", "GET"])
@login_required
def user_exit():
    logout_user()
    print(current_user)
    return redirect(url_for("index_autorization"))


@server.teardown_appcontext
def shutdown_session(exception=None):
    db.session.remove()


# bot.polling()

bot.remove_webhook()
time.sleep(0.1)

bot.set_webhook(url="https://f503-79-133-105-41.eu.ngrok.io")
