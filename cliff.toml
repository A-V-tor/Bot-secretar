# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# –ñ–£–†–ù–ê–õ –ò–ó–ú–ï–ù–ï–ù–ò–ô\n
–í—Å–µ –∑–∞–º–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥—É—Ç –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## {{ version | trim_start_matches(pat="v") }} - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## Unreleased
{% endif %}\
{% if previous %}\
    {% if previous.commit_id and commit_id %}
        [{{ previous.commit_id | truncate(length=7, end="") }}](https://github.com/A-V-tor/Bot-secretar/commit/{{ previous.commit_id }})...\
            [{{ commit_id | truncate(length=7, end="") }}](https://github.com/A-V-tor/Bot-secretar/commit/{{ commit_id }})
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | split(pat="\n") | first | upper_first | trim }} ([{{ commit.id | truncate(length=7, end="") }}](https://github.com/A-V-tor/Bot-secretar/commit/{{ commit.id }}))\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "ü™Ñ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞" },
    { message = "^add", group = "üöÄ –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª" },
    { message = "^fix", group = "üôà –§–∏–∫—Å –±–∞–≥–∞" },
    { message = "^doc", group = "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è" },
    { message = "^perf", group = "üéâ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" },
    { message = "^refactor", group = "üëÄ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥" },
    { message = "^style", group = "üí´ –°—Ç–∏–ª—å" },
    { message = "^test", group = "üß™ –¢–µ—Å—Ç—ã" },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore|^ci", group = "‚öôÔ∏è –†–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏" },
    { body = ".*security", group = "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

tag_pattern = "v[0-9].*"
